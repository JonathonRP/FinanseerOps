diff --git a/providers/email.d.ts b/providers/email.d.ts
index c4daf039bc1c992362abaf065ed189c993449640..f6e57e227c761c385b9a5d507e7fd0ee12e956da 100644
--- a/providers/email.d.ts
+++ b/providers/email.d.ts
@@ -11,29 +11,29 @@ import type { NodemailerConfig, NodemailerUserConfig } from "./nodemailer.js";
 export default function Email(config: NodemailerUserConfig): NodemailerConfig;
 export type EmailProviderType = "email";
 export interface EmailConfig extends CommonProviderOptions {
-    id: string;
-    type: EmailProviderType;
-    name: string;
-    from: string;
-    maxAge: number;
-    sendVerificationRequest: (params: {
-        identifier: string;
-        url: string;
-        expires: Date;
-        provider: EmailConfig;
-        token: string;
-        theme: Theme;
-        request: Request;
-    }) => Awaitable<void>;
-    /** Used to hash the verification token. */
-    secret?: string;
-    /** Used with HTTP-based email providers. */
-    apiKey?: string;
-    /** Used with SMTP-based email providers. */
-    server?: NodemailerConfig["server"];
-    generateVerificationToken?: () => Awaitable<string>;
-    normalizeIdentifier?: (identifier: string) => string;
-    options: EmailUserConfig;
+  id: string;
+  type: EmailProviderType;
+  name: string;
+  from: string;
+  maxAge: number;
+  sendVerificationRequest: (params: {
+    identifier: string;
+    url: string;
+    expires: Date;
+    provider: EmailConfig;
+    token: string;
+    theme: Theme;
+    request: Request;
+  }) => Awaitable<void>;
+  /** Used to hash the verification token. */
+  secret?: string;
+  /** Used with HTTP-based email providers. */
+  apiKey?: string;
+  /** Used with SMTP-based email providers. */
+  server?: NodemailerConfig["server"];
+  generateVerificationToken?: () => Awaitable<string>;
+  normalizeIdentifier?: (identifier: string) => string;
+  options: EmailUserConfig;
 }
 export type EmailUserConfig = Omit<Partial<EmailConfig>, "options" | "type">;
 /**
@@ -45,13 +45,16 @@ export type EmailUserConfig = Omit<Partial<EmailConfig>, "options" | "type">;
  * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!
  */
 export declare function html(params: {
-    url: string;
-    host: string;
-    theme: Theme;
+  url: string;
+  host: string;
+  theme: Theme;
 }): string;
 /** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */
-export declare function text({ url, host }: {
-    url: string;
-    host: string;
+export declare function text({
+  url,
+  host,
+}: {
+  url: string;
+  host: string;
 }): string;
 //# sourceMappingURL=email.d.ts.map
diff --git a/providers/email.js b/providers/email.js
index a65ff126bbb9e19545a0e760b8852699449927f9..d625371778e43422a31bab68479738ba6fe0fe32 100644
--- a/providers/email.js
+++ b/providers/email.js
@@ -1,21 +1,3 @@
-// TODO: Kepts for backwards compatibility
-// Remove this import and encourage users
-// to import it from @auth/core/providers/nodemailer directly
-import Nodemailer from "./nodemailer.js";
-/**
- * @deprecated
- *
- * Import this provider from the `providers/nodemailer` submodule instead of `providers/email`.
- *
- * To log in with nodemailer, change `signIn("email")` to `signIn("nodemailer")`
- */
-export default function Email(config) {
-    return {
-        ...Nodemailer(config),
-        id: "email",
-        name: "Email",
-    };
-}
 /**
  * Email HTML body
  * Insert invisible space into domains from being turned into a hyperlink by email
@@ -25,21 +7,21 @@ export default function Email(config) {
  * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!
  */
 export function html(params) {
-    const { url, host, theme } = params;
-    const escapedHost = host.replace(/\./g, "&#8203;.");
-    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
-    const brandColor = theme.brandColor || "#346df1";
-    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
-    const buttonText = theme.buttonText || "#fff";
-    const color = {
-        background: "#f9f9f9",
-        text: "#444",
-        mainBackground: "#fff",
-        buttonBackground: brandColor,
-        buttonBorder: brandColor,
-        buttonText,
-    };
-    return `
+  const { url, host, theme } = params;
+  const escapedHost = host.replace(/\./g, "&#8203;.");
+  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
+  const brandColor = theme.brandColor || "#346df1";
+  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
+  const buttonText = theme.buttonText || "#fff";
+  const color = {
+    background: "#f9f9f9",
+    text: "#444",
+    mainBackground: "#fff",
+    buttonBackground: brandColor,
+    buttonBorder: brandColor,
+    buttonText,
+  };
+  return `
 <body style="background: ${color.background};">
   <table width="100%" border="0" cellspacing="20" cellpadding="0"
     style="background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;">
@@ -73,5 +55,5 @@ export function html(params) {
 }
 /** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */
 export function text({ url, host }) {
-    return `Sign in to ${host}\n${url}\n\n`;
+  return `Sign in to ${host}\n${url}\n\n`;
 }
diff --git a/providers/index.d.ts b/providers/index.d.ts
index 89ae7526461fbecc0d4b32f21bb44951f4be0490..d34ecb966b336c8583f1e14d9084842e4c04fab4 100644
--- a/providers/index.d.ts
+++ b/providers/index.d.ts
@@ -1,9 +1,17 @@
 import { Profile } from "../types.js";
 import CredentialsProvider from "./credentials.js";
-import type { CredentialsConfig, CredentialsProviderType } from "./credentials.js";
+import type {
+  CredentialsConfig,
+  CredentialsProviderType,
+} from "./credentials.js";
 import type EmailProvider from "./email.js";
 import type { EmailConfig, EmailProviderType } from "./email.js";
-import type { OAuth2Config, OAuthConfig, OAuthProviderType, OIDCConfig } from "./oauth.js";
+import type {
+  OAuth2Config,
+  OAuthConfig,
+  OAuthProviderType,
+  OIDCConfig,
+} from "./oauth.js";
 import { WebAuthnConfig, WebAuthnProviderType } from "./webauthn.js";
 export * from "./credentials.js";
 export * from "./email.js";
@@ -16,27 +24,32 @@ export * from "./oauth.js";
  * @see [Email or Passwordless Authentication](https://authjs.dev/concepts/oauth)
  * @see [Credentials-based Authentication](https://authjs.dev/concepts/credentials)
  */
-export type ProviderType = "oidc" | "oauth" | "email" | "credentials" | WebAuthnProviderType;
+export type ProviderType =
+  | "oidc"
+  | "oauth"
+  | "email"
+  | "credentials"
+  | WebAuthnProviderType;
 /** Shared across all {@link ProviderType} */
 export interface CommonProviderOptions {
-    /**
-     * Uniquely identifies the provider in {@link AuthConfig.providers}
-     * It's also part of the URL
-     */
-    id: string;
-    /**
-     * The provider name used on the default sign-in page's sign-in button.
-     * For example if it's "Google", the corresponding button will say:
-     * "Sign in with Google"
-     */
-    name: string;
-    /** See {@link ProviderType} */
-    type: ProviderType;
+  /**
+   * Uniquely identifies the provider in {@link AuthConfig.providers}
+   * It's also part of the URL
+   */
+  id: string;
+  /**
+   * The provider name used on the default sign-in page's sign-in button.
+   * For example if it's "Google", the corresponding button will say:
+   * "Sign in with Google"
+   */
+  name: string;
+  /** See {@link ProviderType} */
+  type: ProviderType;
 }
 interface InternalProviderOptions {
-    /** Used to deep merge user-provided config with the default config
-     */
-    options?: Record<string, unknown>;
+  /** Used to deep merge user-provided config with the default config
+   */
+  options?: Record<string, unknown>;
 }
 /**
  * Must be a supported authentication provider config:
@@ -50,13 +63,47 @@ interface InternalProviderOptions {
  * @see [Email (Passwordless) guide](https://authjs.dev/guides/providers/email)
  * @see [Credentials guide](https://authjs.dev/guides/providers/credentials)
  */
-export type Provider<P extends Profile = any> = (((OIDCConfig<P> | OAuth2Config<P> | EmailConfig | CredentialsConfig | WebAuthnConfig) & InternalProviderOptions) | ((...args: any) => (OAuth2Config<P> | OIDCConfig<P> | EmailConfig | CredentialsConfig | WebAuthnConfig) & InternalProviderOptions)) & InternalProviderOptions;
-export type BuiltInProviders = Record<OAuthProviderType, (config: Partial<OAuthConfig<any>>) => OAuthConfig<any>> & Record<CredentialsProviderType, typeof CredentialsProvider> & Record<EmailProviderType, typeof EmailProvider> & Record<WebAuthnProviderType, (config: Partial<WebAuthnConfig>) => WebAuthnConfig>;
-export type AppProviders = Array<Provider | ReturnType<BuiltInProviders[keyof BuiltInProviders]>>;
+export type Provider<P extends Profile = any> = (
+  | ((
+      | OIDCConfig<P>
+      | OAuth2Config<P>
+      | EmailConfig
+      | CredentialsConfig
+      | WebAuthnConfig
+    ) &
+      InternalProviderOptions)
+  | ((
+      ...args: any
+    ) => (
+      | OAuth2Config<P>
+      | OIDCConfig<P>
+      | EmailConfig
+      | CredentialsConfig
+      | WebAuthnConfig
+    ) &
+      InternalProviderOptions)
+) &
+  InternalProviderOptions;
+export type BuiltInProviders = Record<
+  OAuthProviderType,
+  (config: Partial<OAuthConfig<any>>) => OAuthConfig<any>
+> &
+  Record<CredentialsProviderType, typeof CredentialsProvider> &
+  Record<EmailProviderType, typeof EmailProvider> &
+  Record<
+    WebAuthnProviderType,
+    (config: Partial<WebAuthnConfig>) => WebAuthnConfig
+  >;
+export type AppProviders = Array<
+  Provider | ReturnType<BuiltInProviders[keyof BuiltInProviders]>
+>;
 export interface AppProvider extends CommonProviderOptions {
-    signinUrl: string;
-    callbackUrl: string;
+  signinUrl: string;
+  callbackUrl: string;
 }
 export type RedirectableProviderType = "email" | "credentials";
-export type BuiltInProviderType = RedirectableProviderType | OAuthProviderType | WebAuthnProviderType;
+export type BuiltInProviderType =
+  | RedirectableProviderType
+  | OAuthProviderType
+  | WebAuthnProviderType;
 //# sourceMappingURL=index.d.ts.map
diff --git a/providers/nodemailer.js b/providers/nodemailer.js
index 79a28c6a0d9017601712883c4bac1d539888c87c..22796b718b23f9611402af6023c4e83d2fcd1f4e 100644
--- a/providers/nodemailer.js
+++ b/providers/nodemailer.js
@@ -1,32 +1,33 @@
 import { createTransport } from "nodemailer";
 import { html, text } from "./email.js";
 import { AuthError } from "../errors.js";
+/* @__PURE__ */
 export default function Nodemailer(config) {
-    if (!config.server)
-        throw new AuthError("Nodemailer requires a `server` configuration");
-    return {
-        id: "nodemailer",
-        type: "email",
-        name: "Nodemailer",
-        server: { host: "localhost", port: 25, auth: { user: "", pass: "" } },
-        from: "Auth.js <no-reply@authjs.dev>",
-        maxAge: 24 * 60 * 60,
-        async sendVerificationRequest(params) {
-            const { identifier, url, provider, theme } = params;
-            const { host } = new URL(url);
-            const transport = createTransport(provider.server);
-            const result = await transport.sendMail({
-                to: identifier,
-                from: provider.from,
-                subject: `Sign in to ${host}`,
-                text: text({ url, host }),
-                html: html({ url, host, theme }),
-            });
-            const failed = result.rejected.concat(result.pending).filter(Boolean);
-            if (failed.length) {
-                throw new Error(`Email (${failed.join(", ")}) could not be sent`);
-            }
-        },
-        options: config,
-    };
+  if (!config.server)
+    throw new AuthError("Nodemailer requires a `server` configuration");
+  return {
+    id: "nodemailer",
+    type: "email",
+    name: "Nodemailer",
+    server: { host: "localhost", port: 25, auth: { user: "", pass: "" } },
+    from: "Auth.js <no-reply@authjs.dev>",
+    maxAge: 24 * 60 * 60,
+    async sendVerificationRequest(params) {
+      const { identifier, url, provider, theme } = params;
+      const { host } = new URL(url);
+      const transport = createTransport(provider.server);
+      const result = await transport.sendMail({
+        to: identifier,
+        from: provider.from,
+        subject: `Sign in to ${host}`,
+        text: text({ url, host }),
+        html: html({ url, host, theme }),
+      });
+      const failed = result.rejected.concat(result.pending).filter(Boolean);
+      if (failed.length) {
+        throw new Error(`Email (${failed.join(", ")}) could not be sent`);
+      }
+    },
+    options: config,
+  };
 }
diff --git a/src/providers/email.ts b/src/providers/email.ts
index 96b98dea952abce2724fda8cb9d0a3300cd93910..2d91b55874ff00994ed66864b1b37f3f1a39f102 100644
--- a/src/providers/email.ts
+++ b/src/providers/email.ts
@@ -1,58 +1,39 @@
-import type { CommonProviderOptions } from "./index.js"
-import type { Awaitable, Theme } from "../types.js"
+import type { CommonProviderOptions } from "./index.js";
+import type { Awaitable, Theme } from "../types.js";
 
-// TODO: Kepts for backwards compatibility
-// Remove this import and encourage users
-// to import it from @auth/core/providers/nodemailer directly
-import Nodemailer from "./nodemailer.js"
-import type { NodemailerConfig, NodemailerUserConfig } from "./nodemailer.js"
-
-/**
- * @deprecated
- *
- * Import this provider from the `providers/nodemailer` submodule instead of `providers/email`.
- *
- * To log in with nodemailer, change `signIn("email")` to `signIn("nodemailer")`
- */
-export default function Email(config: NodemailerUserConfig): NodemailerConfig {
-  return {
-    ...Nodemailer(config),
-    id: "email",
-    name: "Email",
-  }
-}
+import type { NodemailerConfig } from "./nodemailer.js";
 
 // TODO: Rename to Token provider
 // when started working on https://github.com/nextauthjs/next-auth/discussions/1465
-export type EmailProviderType = "email"
+export type EmailProviderType = "email";
 
 export interface EmailConfig extends CommonProviderOptions {
-  id: string
-  type: EmailProviderType
-  name: string
-  from: string
-  maxAge: number
+  id: string;
+  type: EmailProviderType;
+  name: string;
+  from: string;
+  maxAge: number;
   sendVerificationRequest: (params: {
-    identifier: string
-    url: string
-    expires: Date
-    provider: EmailConfig
-    token: string
-    theme: Theme
-    request: Request
-  }) => Awaitable<void>
+    identifier: string;
+    url: string;
+    expires: Date;
+    provider: EmailConfig;
+    token: string;
+    theme: Theme;
+    request: Request;
+  }) => Awaitable<void>;
   /** Used to hash the verification token. */
-  secret?: string
+  secret?: string;
   /** Used with HTTP-based email providers. */
-  apiKey?: string
+  apiKey?: string;
   /** Used with SMTP-based email providers. */
-  server?: NodemailerConfig["server"]
-  generateVerificationToken?: () => Awaitable<string>
-  normalizeIdentifier?: (identifier: string) => string
-  options: EmailUserConfig
+  server?: NodemailerConfig["server"];
+  generateVerificationToken?: () => Awaitable<string>;
+  normalizeIdentifier?: (identifier: string) => string;
+  options: EmailUserConfig;
 }
 
-export type EmailUserConfig = Omit<Partial<EmailConfig>, "options" | "type">
+export type EmailUserConfig = Omit<Partial<EmailConfig>, "options" | "type">;
 
 /**
  * Email HTML body
@@ -63,14 +44,14 @@ export type EmailUserConfig = Omit<Partial<EmailConfig>, "options" | "type">
  * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!
  */
 export function html(params: { url: string; host: string; theme: Theme }) {
-  const { url, host, theme } = params
+  const { url, host, theme } = params;
 
-  const escapedHost = host.replace(/\./g, "&#8203;.")
+  const escapedHost = host.replace(/\./g, "&#8203;.");
 
   // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
-  const brandColor = theme.brandColor || "#346df1"
+  const brandColor = theme.brandColor || "#346df1";
   // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
-  const buttonText = theme.buttonText || "#fff"
+  const buttonText = theme.buttonText || "#fff";
 
   const color = {
     background: "#f9f9f9",
@@ -79,7 +60,7 @@ export function html(params: { url: string; host: string; theme: Theme }) {
     buttonBackground: brandColor,
     buttonBorder: brandColor,
     buttonText,
-  }
+  };
 
   return `
 <body style="background: ${color.background};">
@@ -111,10 +92,10 @@ export function html(params: { url: string; host: string; theme: Theme }) {
     </tr>
   </table>
 </body>
-`
+`;
 }
 
 /** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */
 export function text({ url, host }: { url: string; host: string }) {
-  return `Sign in to ${host}\n${url}\n\n`
+  return `Sign in to ${host}\n${url}\n\n`;
 }
